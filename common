#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 Nathan Chancellor
#
# Helper functions


###############
#             #
#  VARIABLES  #
#             #
###############

# What OS are we on?
HOST=$(uname -n | tr '[:upper:]' '[:lower:]')

# Location of "scripts" folder
SCRIPTS_FOLDER=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)
BIN_FOLDER=${SCRIPTS_FOLDER}/bin

# Common locations amongst scripts
KERNEL_FOLDER=${HOME}/kernels
MISC_FOLDER=${HOME}/misc
REPO_FOLDER=${HOME}/repos
ROM_FOLDER=${HOME}/roms
TC_FOLDER=${HOME}/toolchains
WEB_FOLDER=/var/www

# Colors
BLINK_RED="\033[05;31m"
BLUE="\033[01;34m"
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"

# Number of make threads
THREADS=$(($(nproc --all) + 1))
JOBS_FLAG="-j${THREADS}"

# Common ccache variable
CCACHE=$(command -v ccache)

# Export everything to satisfy shellcheck
export HOST SCRIPTS_FOLDER BIN_FOLDER KERNEL_FOLDER MISC_FOLDER REPO_FOLDER \
       ROM_FOLDER TC_FOLDER WEB_FOLDER BLINK_RED BLUE BOLD GRN RED RST YLW \
       THREADS JOBS_FLAG CCACHE


###############
#             #
#  FUNCTIONS  #
#             #
###############

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}


# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}


# Formats the time
function format_time() {
    local TIME_STRING
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}


# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}


# Prints an error in bold red and exits the script
function die() {
    if [[ ${TG} ]]; then
        local TMP_FILE
        TMP_FILE=$(mktemp)
        # Info must be resourced so public chats don't get notified
        load_botinfo
        {
            echo "\`\`\`"
            echo "An error was detected while running the following command:"
            echo
            echo "$(basename "${0}") ${PARAMS}"
            echo
            echo "The error was:"
            echo
            echo "${*}"
            echo "\`\`\`"
        } > "${TMP_FILE}"
        tg_msg "$(cat "${TMP_FILE}")"
        rm -f "${TMP_FILE}"
    fi

    display_error "${@}"
    if type -p pre_exit_commands; then
        pre_exit_commands
    fi
    exit 1
}


# Prints a warning in bold yellow
function warn() {
    echo
    echo "${YLW}${1}${RST}"
    [[ -z ${2} ]] && echo
}


# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}


# Add a remote if it doesn't exist
function add_remote() {
    if ! git remote | grep -q -m 1 "${1}"; then
        git remote add "${1}" "${2}"
    fi
}


# Convert a file location to web link
function web_link() {
    echo "${1}" | sed s/"$(echo "${WEB_FOLDER}" | sed 's/\//\\\//g')"/https:\\/\\/nathanchance.me/
}


# Set up a virtual environment for Python
function mkavenv {
    virtualenv2 "${HOME}/venv"
    source "${HOME}/venv/bin/activate"
}


# Remove virtual environment
function rmvenv {
    deactivate
    rm -rf "${HOME}/venv"
}


# Source Telegram bot information
function load_botinfo() {
    [[ -f ${HOME}/.botinfo ]] && source ~/.botinfo
}
load_botinfo


# Telegram notifier function
function tg_msg() {
    if [[ -z ${TOKEN} ]]; then
        display_error "tg_msg() was called but there was no token!"
        return 1
    fi

    if [[ -z ${CHAT_ID} ]]; then
        display_error "tg_msg() was called but there was no chat ID!"
        return 1
    fi

    curl -s -X POST https://api.telegram.org/bot"${TOKEN}"/sendMessage \
            -d chat_id="${CHAT_ID}" \
            -d parse_mode="Markdown" \
            -d text="${*}" 1>/dev/null
}


# Telegram uploader function
function tg_upload() {
    local FILE; FILE=${1}; shift

    if [[ ! -f ${FILE} ]]; then
        display_error "tg_upload() failed to find ${FILE}!"
        return 1
    fi

    curl -s -F chat_id="${CHAT_ID}" \
            -F document=@"${FILE}" \
            -F caption="${*}" \
            -X POST https://api.telegram.org/bot"${TOKEN}"/sendDocument 1>/dev/null
}


# Remove URLs from Clang version
function clang_version() {
    [[ ${#} -lt 1 || ! ${1} =~ "clang" ]] && { display_error "You didn't supply a Clang binary!"; return; }
    [[ ! -f ${1} ]] && { display_error "Clang binary supplied doesn't exist!"; return; }

    case "${1}" in
        *aosp*) "${1}" --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//' || display_error "Something went wrong!" ;;
        *) "${1}" --version | head -n 1 | cut -d \( -f 1 | sed 's/[[:space:]]*$//' || display_error "Something went wrong!" ;;
    esac
}


# Is GPG passphrase cached?
# https://demu.red/blog/2016/06/how-to-check-if-your-gpg-key-is-in-cache/
function gpg_available() {
    NUM=$(gpg-connect-agent 'keyinfo --list' /bye 2>/dev/null | awk 'BEGIN{CACHED=0} /^S/ {if($7==1){CACHED=1}} END{if($0!=""){print CACHED} else {print "none"}}')
    if [[ ${NUM} = "none" || ${NUM} -eq 0 ]]; then
        die "Please run 'echo \"test\" | gpg --clearsign &>/dev/null' to cache gpg passphrase!"
    fi
}


# ripgrep wrapper
function rg() {
    # Bail out if rg is not installed
    command -v rg &>/dev/null || { warn "ripgrep is not installed!"; return; }
    
    # Colors match ag
    command rg --colors "path:fg:green" \
               --colors "path:style:bold" \
               --colors "line:fg:yellow" \
               --colors "line:style:bold" \
               --colors "column:fg:yellow" \
               --colors "column:style:bold" \
               --colors "match:fg:black" \
               --colors "match:bg:yellow" \
               "${@}"
}
